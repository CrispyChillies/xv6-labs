#!/usr/bin/perl -w

# Generate usys.S, the stubs for syscalls.

print "# generated by usys.pl - do not edit\n";

print "#include \"kernel/syscall.h\"\n";

# By using the entry subrountine, the script can dynamically generate assembly code stubs for all system calls listed within it 
# which then included i -> usys.S 

sub entry {
    my $name = shift;
    print ".global $name\n";
    print "${name}:\n";
    print " li a7, SYS_${name}\n"; # Place the correct system call number in register a7
    print " ecall\n"; # This function is used to switch from user to kernel mode.
    print " ret\n"; # Return from the system call
}

# In the kernel, the trap handler (in trap.c/void usertrap(void)) identifies that the trap was due to an ecall (system call). 
# It uses the value in the a7 register to determine which system call needs to be handled. 
# This mapping of system call numbers to function handlers is set up in syscall.c.
	
entry("fork");
entry("exit");
entry("wait");
entry("pipe");
entry("read");
entry("write");
entry("close");
entry("kill");
entry("exec");
entry("open");
entry("mknod");
entry("unlink");
entry("fstat");
entry("link");
entry("mkdir");
entry("chdir");
entry("dup");
entry("getpid");
entry("sbrk");
entry("sleep");
entry("uptime");

entry("trace");
entry("sysinfo");
# This function generates the assembly code for each system call.
# The assembly stubs ensure that when a user program calls a system function, 
# the correct system call number is placed in the appropriate register (a7 for RISC-V), 
# and then the ecall instruction is used to switch from user to kernel mode.