diff --git a/Makefile b/Makefile
index 365c91b..de1d085 100644
--- a/Makefile
+++ b/Makefile
@@ -30,7 +30,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o\
+  $K/sysinfo.o \
 
 OBJS_KCSAN = \
   $K/start.o \
@@ -188,7 +189,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+	$U/_trace\
+	$U/_sysinfotest\
 
 
 
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..d0b1d9d 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+uint64          freemem();
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +107,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+uint64          nproc();
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -184,6 +186,7 @@ void            plic_complete(int);
 void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
+int             sysinfo(uint64);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..c4401f6 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,18 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+uint64
+freemem()
+{
+  struct run *r;
+  uint64 count = 0;
+  acquire(&kmem.lock);
+  for (r = kmem.freelist; r; r = r->next)
+  {
+    ++count;
+  }
+  release(&kmem.lock);
+
+  return count * 4096;
+}
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..f3d72e9 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -288,6 +288,8 @@ fork(void)
     return -1;
   }
 
+  np->trace_mask = p->trace_mask;
+
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
@@ -686,3 +688,17 @@ procdump(void)
     printf("\n");
   }
 }
+
+uint64
+nproc()
+{
+  uint64 count = 0;
+  struct proc *p;
+  for (p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if (p->state != UNUSED) ++count;
+    release(&p->lock);
+  }
+
+  return count;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..3bd8a49 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -1,3 +1,4 @@
+#define curproc (mycpu()->proc)
 // Saved registers for kernel context switches.
 struct context {
   uint64 ra;
@@ -104,4 +105,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int trace_mask;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6c3093b 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -102,6 +102,9 @@ extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
 
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
+
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
@@ -126,6 +129,37 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
+};
+
+char *syscallnames[] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+
+[SYS_trace]   "trace",
+[SYS_sysinfo] "sysinfo",
+
 };
 
 void
@@ -144,4 +178,9 @@ syscall(void)
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
-}
+
+  // check the bit at the position n is != 0, so that it will print the system call name not NULL
+  if (p->trace_mask >> num){
+    printf("%d: syscall %s -> %d\n", p->pid, syscallnames[num], p->trapframe->a0);
+  }
+}
\ No newline at end of file
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..0dfedc7 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_sysinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..8b4d4de 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,27 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void){
+  
+int mask;
+argint(0, &mask);
+
+if(mask < 0)
+  return -1;
+myproc()->trace_mask = mask;
+
+return 0;
+
+}
+
+uint64
+sys_sysinfo(void)
+{
+  uint64 a0addr;
+
+  argaddr(0, &a0addr); // save the address of register a0 of current process's trapframe into addr
+
+  return sysinfo(a0addr);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..4e03503 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct sysinfo;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int sysinfo(struct sysinfo *info);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..30a7314 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -6,6 +6,9 @@ print "# generated by usys.pl - do not edit\n";
 
 print "#include \"kernel/syscall.h\"\n";
 
+# By using the entry subrountine, the script can dynamically generate assembly code stubs for all system calls listed within it 
+# which then included i -> usys.S 
+
 sub entry {
     my $name = shift;
     print ".global $name\n";
@@ -36,3 +39,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+
+entry("trace");
+entry("sysinfo");
\ No newline at end of file
